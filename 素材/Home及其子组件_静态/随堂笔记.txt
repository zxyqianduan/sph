

	1. 早上复习
	
	2. 今日目标

	--------------------
	

	3. 搭建项目整体结构
	
	
	  ① 准备好重置的 reset.css ，改成 .less ，在 main.js 引入即可
	  
	  ② 需要在 components 目录下创建组件，准备好头部和底部结构
	  
		直接从素材中拷贝 home.html 以及 home.less 中对应的结构和样式即可
	  
	  ③ 处理头部和底部的样式
	  
	  ④ 从素材的静态文件中找到 images 目录，将两个图片放到 assets 目录下
	  
	    在 html 结构中通过 @ 导入图片
		

	--------------------		

		
	4. 实现路由的切换
	
	   在 App.vue 中，router-view 用来展示一级路由，并且在整个项目中都是一级路由
	   
	   路由的配置不用那么麻烦，直接都写成一级路由即可
	   
	   先提示配置 4 个路由，分别是：
	   
	    1. /index
		2. /login
		3. /register
		4. /search


	   一个路由对应一个组件，
	   
	   所以需要先创建组件、然后配置路由规则
	   
	   最后在进行页面切换，就是将 Header/index.vue 中的 a 标签换成 router-link
	   
	   
	   
	--------------------
	
	   
	5. 6. 7.  对知识点讲解，详见笔记即可
	
	  使用编程式导航向同一个路由进行进行频繁跳转，就会报错误
      
	  原因：是 push 方法内部使用了 Promise，要求需要指定成功或者错误的回调
      
	  所以解决方法 1：给 push 方法新增 .then 和 .catch 方法
	  
      // this.$router
      //   .push('/search')
      //   .then(() => {})
      //   .catch(() => {})

      解决方法 2：只给 push 方法新增 catch 方法，实现对代码的简化
      如果只写第一个 then，实际是处理成功的逻辑，处理跳转成功的
      catch 方法才是频繁跳转以后，会触发的回调，在路由内部做了处理，只要频繁跳转，就会触发 catch
      // this.$router.push('/search').catch(() => {})

      解决方法 3：文档说可以加第二个、第三个参数，其实第二个、第三个参数就是处理成功和失败的回调
      只添加第二个参数或者添加第三个参数也不报错误
      第二个参数和第三个参数可以省略一个，就可以实现对代码的简化
      // this.$router.push('/search', () => {}, () => {})
      //  this.$router.push('/search', () => {})
	  this.$router.push('/search', undefined, () => {})
	
	
	
	--------------------
	
	08. 对 VueRouter 本身的数组方法进行增强
	
	09. 对 VueRouter 本身的数组方法进行增强
	
	   对路由给提供的 push 和 replace 方法进行增强

	   需求：只想使用 this.$router.push('/xxx') 就能实现跳转，不需要加其他回调或者 .catch()
	   
	   解决方法：对对路由给提供的 push 和 replace 方法进行增强
	   
	   怎么增强：
	   
		判断是否添加了第二个、第三个参数
       
	    如果添加了，使用第二个或者第三个参数来做异常处理
		
		如果没有添加，直接使用 catch 捕获异常即可
	
	
	
	15. 创建分支写功能代码
	
	  
	    目前项目初始化代码全部在 master 分支
		
		master 分支是主分支，以后 master 分支存储的是项目上线以后的代码
		
		新开发的功能，不能直接在 master 开发
		
		----------------------
		
		开发中一般会基于 master 主分支，创建一个 develop 分支
		
		develop 分支被称为基准分支，
		
		所有的功能分支都需要基于 develop 来进行创建

		并且所有的功能写好以后，需要都先合并到 develop 进行测试
		
		如果没有问题以后，develop 在进行其他处理或者合并到 master
		
		
		-------------------------
		
		一般公司对分支命名也有要求，一般功能分支都是以 feature 进行开发，
		
		为啥，主要是为了和其他分支区分，例如：
		
		feature/index  feature 开头代表是功能分支
		
		bugfix/xxxx    bugfix 开头代表是在修复 develop 分支的 Bug
		
		hotfix/xxxx    hotfix 开头代表是在修复 master 分支的 Bug